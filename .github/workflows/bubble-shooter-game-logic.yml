name: Process Game Logic

on:
  issue_comment:
    types: [created]

jobs:
  process-comment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Extract Branch Name
        id: extract_branch
        run: echo "BRANCH_NAME=${${{ github.ref }}#refs/heads/}" >> $GITHUB_ENV

      - name: Display Branch Name
        run: |
          echo "Branch Name: ${{ steps.extract_branch.outputs.BRANCH_NAME }}"

      - name: Validate Comment Command
        id: validate_command
        run: |
          comment_body="${{ github.event.comment.body }}"
          if [[ "$comment_body" =~ ^(shoot|move-defense)\s.* ]]; then
            echo "is_valid=true" >> $GITHUB_ENV
          else
            echo "is_valid=false" >> $GITHUB_ENV
          fi

      - name: Stop if Invalid Command
        if: env.is_valid == 'false'
        run: |
          echo "Invalid command. Ignoring comment."

      - name: Process Game Logic
        if: env.is_valid == 'true'
        run: |
          # Parse the command and update the game state
          python process_command.py "${{ github.event.comment.body }}" "./game-state-${{github.ref_name}}.json"

      - name: Commit and Push Updated Game State
        if: env.is_valid == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add game-state-${{github.ref_name}}.json
          git commit -m "Updated game state after move: ${{ github.event.comment.body }}"
          git push

      - name: Respond to Player
        if: env.is_valid == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const commentBody = `
            ðŸŽ® **Move Processed!**
            \nCommand: **${{ github.event.comment.body }}** 
            \nThe game state has been updated. It's now the next player's turn! ðŸš€
            `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

  display-game-state:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Get Initial Game State and Post as Comment
        run: |
          # Read the game state from the file
          initial_game_state=$(cat ./states/game-state-${{ github.ref_name }}.json)

          # Extract relevant game state information
          player_1_name=$(echo $initial_game_state | jq -r '.player_1.name')
          player_1_score=$(echo $initial_game_state | jq -r '.player_1.score')
          player_2_name=$(echo $initial_game_state | jq -r '.player_2.name')
          player_2_score=$(echo $initial_game_state | jq -r '.player_2.score')
          current_player=$(echo $initial_game_state | jq -r '.current_player')

          # Convert game_state array to markdown format
          game_state_markdown=""

          for row in $(echo $initial_game_state | jq -r '.game_state | .[] | @base64'); do
            row_markdown=$(echo $row | base64 --decode | tr -d '[],"' | tr '\n' ' ' | sed 's/  / | /g')
            game_state_markdown="$game_state_markdown| $row_markdown |\n"
          done

          # Prepare the formatted message
          message="### Initial Game State\n\n**Player 1**: $player_1_name (Score: $player_1_score)\n**Player 2**: $player_2_name (Score: $player_2_score)\n**Current Player**: $current_player\n\n**Game State:**\n\n\`\`\`markdown\n$game_state_markdown\`\`\`"

          # Post the comment with the formatted game state
          pr_number=$(gh pr view --json number -q ".number")
          gh pr comment $pr_number --body "$message"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}