name: Process Game Logic

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  process_comment:
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    steps:
      - name: Display Event Payload
        run: |
          echo "Event Payload:"
          echo "${{ toJson(github.event) }}"

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Branch Name from PR ID
        id: extract_branch
        run: |
          pr_number=${{ github.event.issue.number }}
          BRANCH_NAME=$(gh pr view $pr_number --json headRefName -q '.headRefName')
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Branch name extracted from PR: $BRANCH_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.extract_branch.outputs.BRANCH_NAME }}

  #      - name: Validate Comment Command
  #        id: validate_command
  #        run: |
  #          comment_body="${{ github.event.comment.body }}"
  #          if [[ "$comment_body" =~ ^(shoot|move-defense)\s.* ]]; then
  #            echo "is_valid=true" >> $GITHUB_ENV
  #          else
  #            echo "is_valid=false" >> $GITHUB_ENV
  #          fi
  #
  #      - name: Stop if Invalid Command
  #        if: env.is_valid == 'false'
  #        run: |
  #          echo "Invalid command. Ignoring comment."
  #
  #      - name: Process Game Logic
  #        if: env.is_valid == 'true'
  #        run: |
  #          # Parse the command and update the game state
  #          python process_command.py "${{ github.event.comment.body }}" "./game-state-${{github.ref_name}}.json"
  #
  #      - name: Commit and Push Updated Game State
  #        if: env.is_valid == 'true'
  #        run: |
  #          git config --global user.name "github-actions[bot]"
  #          git config --global user.email "github-actions[bot]@users.noreply.github.com"
  #          git add game-state-${{github.ref_name}}.json
  #          git commit -m "Updated game state after move: ${{ github.event.comment.body }}"
  #          git push
  #
  #      - name: Respond to Player
  #        if: env.is_valid == 'true'
  #        uses: actions/github-script@v6
  #        with:
  #          script: |
  #            const commentBody = `
  #            ðŸŽ® **Move Processed!**
  #            \nCommand: **${{ github.event.comment.body }}**
  #            \nThe game state has been updated. It's now the next player's turn! ðŸš€
  #            `;
  #            github.rest.issues.createComment({
  #              issue_number: context.issue.number,
  #              owner: context.repo.owner,
  #              repo: context.repo.repo,
  #              body: commentBody
  #            });
      - name: Generate Markdown Summary
        id: generate_game_state_markdown
        uses: Ma11hewThomas/github-markdown-builder@v1
        with:
          template-file-path: "./states/example.hbs"
          json-file-path: "./states/example.json"
          summary: true
          pull-request: true
        
      - name: Comment PR with Game State
        uses: thollander/actions-comment-pull-request@v3
        with:
          pr-number: ${{ github.event.pull_request.number }}
          file-path: ${{ steps.generate_game_state_markdown.outputs.markdown }}
