name: Process Game Logic

on:
  issue_comment:
    types: [created]

jobs:
  process_comment:
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Branch Name from PR ID
        id: extract_branch
        run: |
          pr_number=${{ github.event.issue.number }}
          BRANCH_NAME=$(gh pr view $pr_number --json headRefName -q '.headRefName')
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Branch name extracted from PR: $BRANCH_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.extract_branch.outputs.BRANCH_NAME }}

      - name: Assign Players Based on Comment Author
        id: assign_players
        run: |
          COMMENT_AUTHOR="${{ github.event.comment.user.login }}"
          echo "Comment author: $COMMENT_AUTHOR"

          # Load the game state
          GAME_STATE_FILE="./states/game-state-${{ steps.extract_branch.outputs.BRANCH_NAME }}.json"

          if [ ! -f "$GAME_STATE_FILE" ]; then
            echo "Game state file not found. Please initialize the game first."
            exit 1
          fi

          # Extract current player assignments
          PLAYER_A_NAME=$(jq -r '.player_a.name' $GAME_STATE_FILE)
          PLAYER_B_NAME=$(jq -r '.player_b.name' $GAME_STATE_FILE)

          # Assign the comment author to the first available player slot
          if [ "$PLAYER_A_NAME" == "Player A" ]; then
            echo "Assigning $COMMENT_AUTHOR as player_a"
            jq --arg name "$COMMENT_AUTHOR" '.player_a.name = $name' $GAME_STATE_FILE > tmp.json && mv tmp.json $GAME_STATE_FILE
            PLAYER="player_a"
          elif [ "$PLAYER_B_NAME" == "Player B" ]; then
            echo "Assigning $COMMENT_AUTHOR as player_b"
            jq --arg name "$COMMENT_AUTHOR" '.player_b.name = $name' $GAME_STATE_FILE > tmp.json && mv tmp.json $GAME_STATE_FILE
            PLAYER="player_b"
          else
            echo "Both players are already assigned. No changes made."
            if [ "$COMMENT_AUTHOR" == "$PLAYER_A_NAME" ]; then
              PLAYER="player_a"
            elif [ "$COMMENT_AUTHOR" == "$PLAYER_B_NAME" ]; then
              PLAYER="player_b"
            else
              echo "Comment author is not a recognized player."
              exit 1
            fi
          fi

          echo "PLAYER=$PLAYER" >> $GITHUB_OUTPUT
          echo "Player detected or assigned: $PLAYER"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Process Comment for Move Command
        if: ${{ github.event.comment.body }}
        run: |
          echo "Processing comment: ${{ github.event.comment.body }}"
          COMMENT="${{ github.event.comment.body }}"
          echo "Comment: $COMMENT"
            if [[ "$COMMENT" =~ ^move\ ([A-Za-z])\ ([0-9]+)$ ]]; then
            # Extract row letter and column number from the comment
            ROW_LETTER=${BASH_REMATCH[1]}           # Extract row letter
            COL_NUMBER=${BASH_REMATCH[2]}           # Extract column number

            # Convert the row letter (A-Z or a-z) to a zero-based index
            ROW=$(printf "%d" "'${ROW_LETTER^^}")   # Convert to uppercase
            ROW=$((ROW - 65))                       # 'A' (ASCII 65) becomes 0

            # Index the column number from 1-based to 0-based
            COL=$((COL_NUMBER - 1))

            echo "Moving to row $ROW (original: $ROW_LETTER), col $COL"

            # Run Python game logic script
            mv ./states/game-state-${{ steps.extract_branch.outputs.BRANCH_NAME }}.json game_state.json
            python bubble_pop_game.py move $ROW $COL || echo "Python script error" >> error.log
            if [ -f error.log ]; then
              echo "Error occurred during Python script execution"
              exit 1
            else
              mv game_state.json ./states/game-state-${{ steps.extract_branch.outputs.BRANCH_NAME }}.json
            fi
          fi

      - name: Remove User Comment after Processing
        if: ${{ github.event.comment }}
        run: |
          echo "Removing user comment"
          gh api -X DELETE /repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR with Error
        if: failure()
        uses: thollander/actions-comment-pull-request@v3
        with:
          pr-number: ${{ github.event.pull_request.number }}
          message: "An error occurred while processing the move command. Please check the workflow logs for details."

      - name: Commit Game State
        if: success()
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add ./states/game-state-${{ steps.extract_branch.outputs.BRANCH_NAME }}.json
          git commit -m "Update game state"
          git push origin ${{ steps.extract_branch.outputs.BRANCH_NAME }}

      - name: Check for Winner and Update PR Title
        run: |
          # Load the current game state
          GAME_STATE_FILE="./states/game-state-${{ steps.extract_branch.outputs.BRANCH_NAME }}.json"
          
          if [ ! -f "$GAME_STATE_FILE" ]; then
            echo "Game state file not found. Cannot proceed."
            exit 1
          fi
          
          # Extract player names and scores
          PLAYER_A_NAME=$(jq -r '.player_a.name' $GAME_STATE_FILE)
          PLAYER_A_SCORE=$(jq -r '.player_a.score' $GAME_STATE_FILE)
          PLAYER_B_NAME=$(jq -r '.player_b.name' $GAME_STATE_FILE)
          PLAYER_B_SCORE=$(jq -r '.player_b.score' $GAME_STATE_FILE)
          
          echo "Player A: $PLAYER_A_NAME, Score: $PLAYER_A_SCORE"
          echo "Player B: $PLAYER_B_NAME, Score: $PLAYER_B_SCORE"
          
          # Check if a player has reached 10 points
          if [ "$PLAYER_A_SCORE" -ge 3 ]; then
            WINNER="$PLAYER_A_NAME"
          elif [ "$PLAYER_B_SCORE" -ge 3 ]; then
            WINNER="$PLAYER_B_NAME"
          else
            WINNER=""
          fi
          
          if [ -n "$WINNER" ]; then
            echo "We have a winner: $WINNER"
            
            # Update the game state to mark the winner
            jq --arg winner "$WINNER" '.winner = $winner' $GAME_STATE_FILE > tmp.json && mv tmp.json $GAME_STATE_FILE
            
            # Update the PR title to reflect the winner
            NEW_TITLE="Game Over: $WINNER wins versus $PLAYER_B_NAME!"
            echo "Updating PR title to: $NEW_TITLE"
            gh pr edit --title "$NEW_TITLE"
            
            # Add a comment to the PR to declare the winner
            gh pr comment --body "ðŸŽ‰ Congratulations! $WINNER has won the game with a score of 10!"
            gh pr lock --lock-reason "Game Over"
            exit 0
          else
            # Construct the active game title with names and scores
            NEW_TITLE="Active game: $PLAYER_A_NAME ($PLAYER_A_SCORE) vs $PLAYER_B_NAME ($PLAYER_B_SCORE)"
            echo "Updating PR title to: $NEW_TITLE"
            gh pr edit --title "$NEW_TITLE"
            
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Markdown Game State
        if: success()
        id: generate_game_state_markdown
        uses: Ma11hewThomas/github-markdown-builder@v1
        with:
          template-file-path: "./states/game-state.hbs"
          json-file-path: "./states/game-state-${{ steps.extract_branch.outputs.BRANCH_NAME }}.json"
          summary: true

      - name: Comment PR with Game State
        if: success()
        uses: thollander/actions-comment-pull-request@v3
        with:
          pr-number: ${{ github.event.pull_request.number }}
          message: ${{ steps.generate_game_state_markdown.outputs.markdown }}
          comment-tag: game-state
